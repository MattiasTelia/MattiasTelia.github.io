name: Test the merge procedure

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true

jobs:
  CheckReleaseBranchExists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Fail if release branch already exists
        run: |
          if git ls-remote --exit-code --heads origin release/${{ inputs.version }}; then
            echo "Release branch release/${{ inputs.version }} already exists. Failing."
            exit 1
          fi

  MergeTest:
    runs-on: ubuntu-latest
    needs: CheckReleaseBranchExists
    permissions:
      contents: write # Grant write permissions to the GITHUB_TOKEN
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Create and push release branch
        run: |
          git fetch origin
          git branch release/${{ inputs.version }}
          git push origin release/${{ inputs.version }}

      - name: Checkout the created branch
        run: |
          git checkout release/${{ inputs.version }}

      - name: Update version in package.json
        run: |
          jq ".version = \"${{ inputs.version }}\"" package.json > package.tmp.json
          mv package.tmp.json package.json

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "Update version to ${{ inputs.version }}"
          git push origin HEAD   

      - name: Merge release branch to min_main
        run: |
          git fetch origin
          git checkout min_main
          git pull origin min_main
          git checkout release/${{ inputs.version }}
          git pull origin release/${{ inputs.version }}
          git merge --no-ff release/${{ inputs.version }} -m "Merge release/${{ inputs.version }} into min_main"
          # Exit if release branch and min_main differ
          if git diff --quiet origin/min_main origin/release/${{ inputs.version }}; then
            echo "Branches differ, exit script and don't push."
            exit 1
          fi          
          git push origin min_main

      - name: Merge min_main branch to min_develop branch
        run: |
          git fetch origin
          git checkout min_develop
          git pull origin min_develop
          git checkout min_main
          git pull origin min_main
          git merge --no-ff min_main -m "Merge min_main into min_develop"
          # Exit if min_main branch and min_develop differ
          if git diff --quiet origin/min_develop origin/min_main; then
            echo "Branches differ, exit script and don't push. Work has been done i develop"
            exit 1
          fi
          git push origin min_develop

