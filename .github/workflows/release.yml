name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true

jobs:
  CheckReleaseBranchExists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Fail if release branch does not exist
        run: |
          if ! git ls-remote --exit-code --heads origin release/${{ inputs.version }}; then
            echo "Release branch release/${{ inputs.version }} does not exist. Failing."
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          TAG_NAME=${{ inputs.version }}
          if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Failing."
            exit 1
          fi  

  CreateAndUploadReleaseAssets:
    runs-on: ubuntu-latest
    needs: CheckReleaseBranchExists
    permissions:
      contents: write # Grant write permissions to the GITHUB_TOKEN
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref: release/${{ inputs.version }}

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create tag if it does not exist
        run: |
          TAG_NAME=${{ inputs.version }}
          git tag --annotate "$TAG_NAME" --message "Release $TAG_NAME"
          git push --tags
          echo "Tag $TAG_NAME created and pushed."
      
      - name: Zip and upload binaries
        run: |
          echo "Zipping and upload binaries..."
          # Call your script to zip and get binaries here
          # For example:
          # ./zip_and_get_binaries.sh

      - name: Install Google Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-linux-signing-keyring.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux-signing-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Convert release notes from html to pdf
        run: |
          google-chrome --headless --no-sandbox --disable-gpu --print-to-pdf=./docs/release_notes/ACE_Web_SDK_Release_Notes.pdf ./docs/release_notes/ACE_Web_SDK_Release_Notes.html

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        with:
          tag_name: ${{ inputs.version }}
          release_name: "Release ${{ inputs.version }}"
          body: "This is the release for version ${{ inputs.version }}."
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Notes PDF
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docs/release_notes/ACE_Web_SDK_Release_Notes.pdf
          asset_name: ACE_Web_SDK_Release_Notes.pdf
          asset_content_type: application/pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find the Web SDK zip file
        id: find_websdk_zip
        run: |
          ZIP_FILE=$(find ./binaries -type f -name "ACEWebSDK-${{ inputs.version }}-*.zip" | head -n 1)
          echo "websdk_zip_file=$(basename "$ZIP_FILE")" >> $GITHUB_OUTPUT

      - name: Upload zip file to release
        if: steps.find_websdk_zip.outputs.websdk_zip_file != ''
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/${{ steps.find_websdk_zip.outputs.websdk_zip_file }}
          asset_name: ${{ steps.find_websdk_zip.outputs.websdk_zip_file }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find the Web SDK debug zip file
        id: find_websdk_debug_zip
        run: |
          ZIP_DEBUG_FILE=$(find ./binaries -type f -name "ACEWebSDK-${{ inputs.version }}-debug-*.zip" | head -n 1)
          echo "websdk_debug_zip_file=$(basename "$ZIP_DEBUG_FILE")" >> $GITHUB_OUTPUT

      - name: Upload zip file to release
        if: steps.find_websdk_debug_zip.outputs.websdk_debug_zip_file != ''
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries/${{ steps.find_websdk_debug_zip.outputs.websdk_debug_zip_file }}
          asset_name: ${{ steps.find_websdk_debug_zip.outputs.websdk_debug_zip_file }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Upload Release Notes .md
#        uses: actions/upload-release-asset@v1
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./docs/release_notes/release_notes.md
#          asset_name: release_notes.md
#          asset_content_type: text/markdown
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Upload multiple assets
#        uses: AButler/upload-release-assets@v3.0
#        with:
#          files: './doc/release_notes/ACE_Web_SDK_Release_Notes.pdf;./path/to/your/binaries.zip'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          release-tag: ${{ inputs.version }}

